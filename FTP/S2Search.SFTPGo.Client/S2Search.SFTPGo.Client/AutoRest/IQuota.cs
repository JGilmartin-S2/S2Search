// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.SFTPGo.Client.AutoRest
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Quota operations.
    /// </summary>
    public partial interface IQuota
    {
        /// <summary>
        /// update the user used quota limits
        /// </summary>
        /// <remarks>
        /// Set the current used quota limits for the given user
        /// </remarks>
        /// <param name='body'>
        /// The only user mandatory fields are username, used_quota_size and
        /// used_quota_files. Please note that if the quota fields are missing
        /// they will default to 0
        /// </param>
        /// <param name='mode'>
        /// the update mode specifies if the given quota usage values should be
        /// added or replace the current ones. Possible values include: 'add',
        /// 'reset'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ApiResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ApiResponse>> UpdateWithHttpMessagesAsync(User body, string mode = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
