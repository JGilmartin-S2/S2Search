// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.SFTPGo.Client.AutoRest
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Delete.
    /// </summary>
    public static partial class DeleteExtensions
    {
            /// <summary>
            /// Delete an existing folder
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// folder name
            /// </param>
            public static ApiResponse FolderMethod(this IDelete operations, string name)
            {
                return operations.FolderMethodAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing folder
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// folder name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiResponse> FolderMethodAsync(this IDelete operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FolderMethodWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing admin
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// the admin username
            /// </param>
            public static ApiResponse AdminMethod(this IDelete operations, string username)
            {
                return operations.AdminMethodAsync(username).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing admin
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// the admin username
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiResponse> AdminMethodAsync(this IDelete operations, string username, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AdminMethodWithHttpMessagesAsync(username, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// the username
            /// </param>
            public static ApiResponse UserMethod(this IDelete operations, string username)
            {
                return operations.UserMethodAsync(username).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// the username
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiResponse> UserMethodAsync(this IDelete operations, string username, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UserMethodWithHttpMessagesAsync(username, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
