// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.SFTPGo.Client.AutoRest
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Get.
    /// </summary>
    public static partial class GetExtensions
    {
            /// <summary>
            /// health check
            /// </summary>
            /// <remarks>
            /// Health endpoint to check if the application is still running and responding
            /// to requests
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string Check(this IGet operations)
            {
                return operations.CheckAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// health check
            /// </summary>
            /// <remarks>
            /// Health endpoint to check if the application is still running and responding
            /// to requests
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CheckAsync(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an access token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object TokenMethod(this IGet operations)
            {
                return operations.TokenMethodAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an access token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> TokenMethodAsync(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TokenMethodWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get version details
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Version(this IGet operations)
            {
                return operations.VersionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get version details
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> VersionAsync(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.VersionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the active users and info about their uploads/downloads
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Connections(this IGet operations)
            {
                return operations.ConnectionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the active users and info about their uploads/downloads
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ConnectionsAsync(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the ban time for the specified IPv4/IPv6 address
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ip'>
            /// IPv4/IPv6 address
            /// </param>
            public static object Time(this IGet operations, string ip)
            {
                return operations.TimeAsync(ip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the ban time for the specified IPv4/IPv6 address
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ip'>
            /// IPv4/IPv6 address
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> TimeAsync(this IGet operations, string ip, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TimeWithHttpMessagesAsync(ip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the score for the specified IPv4/IPv6 address
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ip'>
            /// IPv4/IPv6 address
            /// </param>
            public static object Score(this IGet operations, string ip)
            {
                return operations.ScoreAsync(ip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the score for the specified IPv4/IPv6 address
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ip'>
            /// IPv4/IPv6 address
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ScoreAsync(this IGet operations, string ip, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ScoreWithHttpMessagesAsync(ip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the active quota scans for users home directories
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Scans(this IGet operations)
            {
                return operations.ScansAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the active quota scans for users home directories
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ScansAsync(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ScansWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the active quota scans for folders
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Scans1(this IGet operations)
            {
                return operations.Scans1Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the active quota scans for folders
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Scans1Async(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Scans1WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns an array with one or more folders
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='offset'>
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return. Max value is 500, default is 100
            /// </param>
            /// <param name='order'>
            /// Ordering folders by path. Default ASC. Possible values include: 'ASC',
            /// 'DESC'
            /// </param>
            public static object Folders(this IGet operations, int? offset = 0, int? limit = 100, string order = default(string))
            {
                return operations.FoldersAsync(offset, limit, order).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns an array with one or more folders
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='offset'>
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return. Max value is 500, default is 100
            /// </param>
            /// <param name='order'>
            /// Ordering folders by path. Default ASC. Possible values include: 'ASC',
            /// 'DESC'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> FoldersAsync(this IGet operations, int? offset = 0, int? limit = 100, string order = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FoldersWithHttpMessagesAsync(offset, limit, order, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Find user by name
            /// </summary>
            /// <remarks>
            /// For security reasons the hashed password is omitted in the response
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// folder name
            /// </param>
            public static object Name(this IGet operations, string name)
            {
                return operations.NameAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find user by name
            /// </summary>
            /// <remarks>
            /// For security reasons the hashed password is omitted in the response
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// folder name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> NameAsync(this IGet operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.NameWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns an array with one or more admins
            /// </summary>
            /// <remarks>
            /// For security reasons hashed passwords are omitted in the response
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='offset'>
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return. Max value is 500, default is 100
            /// </param>
            /// <param name='order'>
            /// Ordering admins by username. Default ASC. Possible values include: 'ASC',
            /// 'DESC'
            /// </param>
            public static object Admins(this IGet operations, int? offset = 0, int? limit = 100, string order = default(string))
            {
                return operations.AdminsAsync(offset, limit, order).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns an array with one or more admins
            /// </summary>
            /// <remarks>
            /// For security reasons hashed passwords are omitted in the response
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='offset'>
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return. Max value is 500, default is 100
            /// </param>
            /// <param name='order'>
            /// Ordering admins by username. Default ASC. Possible values include: 'ASC',
            /// 'DESC'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AdminsAsync(this IGet operations, int? offset = 0, int? limit = 100, string order = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AdminsWithHttpMessagesAsync(offset, limit, order, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Find admin by username
            /// </summary>
            /// <remarks>
            /// For security reasons the hashed password is omitted in the response
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// the admin username
            /// </param>
            public static object Username(this IGet operations, string username)
            {
                return operations.UsernameAsync(username).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find admin by username
            /// </summary>
            /// <remarks>
            /// For security reasons the hashed password is omitted in the response
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// the admin username
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UsernameAsync(this IGet operations, string username, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UsernameWithHttpMessagesAsync(username, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns an array with one or more users
            /// </summary>
            /// <remarks>
            /// For security reasons hashed passwords are omitted in the response
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='offset'>
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return. Max value is 500, default is 100
            /// </param>
            /// <param name='order'>
            /// Ordering users by username. Default ASC. Possible values include: 'ASC',
            /// 'DESC'
            /// </param>
            public static object Users(this IGet operations, int? offset = 0, int? limit = 100, string order = default(string))
            {
                return operations.UsersAsync(offset, limit, order).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns an array with one or more users
            /// </summary>
            /// <remarks>
            /// For security reasons hashed passwords are omitted in the response
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='offset'>
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return. Max value is 500, default is 100
            /// </param>
            /// <param name='order'>
            /// Ordering users by username. Default ASC. Possible values include: 'ASC',
            /// 'DESC'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UsersAsync(this IGet operations, int? offset = 0, int? limit = 100, string order = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UsersWithHttpMessagesAsync(offset, limit, order, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Find user by username
            /// </summary>
            /// <remarks>
            /// For security reasons the hashed password is omitted in the response
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// the username
            /// </param>
            public static object Username1(this IGet operations, string username)
            {
                return operations.Username1Async(username).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find user by username
            /// </summary>
            /// <remarks>
            /// For security reasons the hashed password is omitted in the response
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// the username
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Username1Async(this IGet operations, string username, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Username1WithHttpMessagesAsync(username, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve the status of the active services
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Status(this IGet operations)
            {
                return operations.StatusAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the status of the active services
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StatusAsync(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StatusWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
