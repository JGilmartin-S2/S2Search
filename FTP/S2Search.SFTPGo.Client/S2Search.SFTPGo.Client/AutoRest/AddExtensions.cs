// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.SFTPGo.Client.AutoRest
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Add.
    /// </summary>
    public static partial class AddExtensions
    {
            /// <summary>
            /// Adds a new folder
            /// </summary>
            /// <remarks>
            /// a new folder with the specified mapped_path will be added. To update the
            /// used quota parameters a quota scan is needed
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object FolderMethod(this IAdd operations, BaseVirtualFolder body)
            {
                return operations.FolderMethodAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new folder
            /// </summary>
            /// <remarks>
            /// a new folder with the specified mapped_path will be added. To update the
            /// used quota parameters a quota scan is needed
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> FolderMethodAsync(this IAdd operations, BaseVirtualFolder body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FolderMethodWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new admin
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object AdminMethod(this IAdd operations, Admin body)
            {
                return operations.AdminMethodAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new admin
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AdminMethodAsync(this IAdd operations, Admin body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AdminMethodWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object UserMethod(this IAdd operations, User body)
            {
                return operations.UserMethodAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UserMethodAsync(this IAdd operations, User body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UserMethodWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
