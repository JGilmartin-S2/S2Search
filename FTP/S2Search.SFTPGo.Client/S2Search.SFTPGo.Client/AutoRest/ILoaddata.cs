// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.SFTPGo.Client.AutoRest
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Loaddata operations.
    /// </summary>
    public partial interface ILoaddata
    {
        /// <summary>
        /// Restore SFTPGo data from a JSON backup file on the server
        /// </summary>
        /// <remarks>
        /// Users, folders and admins will be restored one by one and the
        /// restore is stopped if a user/folder/admin cannot be added or
        /// updated, so it could happen a partial restore
        /// </remarks>
        /// <param name='inputFile'>
        /// Path for the file to read the JSON serialized data from. This can
        /// be an absolute path or a path relative to the configured
        /// "backups_path". The max allowed file size is 10MB
        /// </param>
        /// <param name='scanQuota'>
        /// Quota scan:
        /// * `0` no quota scan is done, the imported users/folders will have
        /// used_quota_size and used_quota_files = 0 or the existing values if
        /// they already exists. This is the default
        /// * `1` scan quota
        /// * `2` scan quota if the user has quota restrictions
        /// required: false
        /// </param>
        /// <param name='mode'>
        /// Mode:
        /// * `0` New users/admins are added, existing users/admins are
        /// updated. This is the default
        /// * `1` New users/admins are added, existing users/admins are not
        /// modified
        /// * `2` New users are added, existing users are updated and, if
        /// connected, they are disconnected and so forced to use the new
        /// configuration
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ApiResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ApiResponse>> FileWithHttpMessagesAsync(string inputFile, int? scanQuota = default(int?), int? mode = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Restore SFTPGo data from a JSON backup
        /// </summary>
        /// <remarks>
        /// Users, folders and admins will be restored one by one and the
        /// restore is stopped if a user/folder/admin cannot be added or
        /// updated, so it could happen a partial restore
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='scanQuota'>
        /// Quota scan:
        /// * `0` no quota scan is done, the imported users/folders will have
        /// used_quota_size and used_quota_files = 0 or the existing values if
        /// they already exists. This is the default
        /// * `1` scan quota
        /// * `2` scan quota if the user has quota restrictions
        /// required: false
        /// </param>
        /// <param name='mode'>
        /// Mode:
        /// * `0` New users/admins are added, existing users/admins are
        /// updated. This is the default
        /// * `1` New users/admins are added, existing users/admins are not
        /// modified
        /// * `2` New users are added, existing users are updated and, if
        /// connected, they are disconnected and so forced to use the new
        /// configuration
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ApiResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ApiResponse>> BodyWithHttpMessagesAsync(BackupData body, int? scanQuota = default(int?), int? mode = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
