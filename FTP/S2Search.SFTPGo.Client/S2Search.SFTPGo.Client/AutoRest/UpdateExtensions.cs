// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.SFTPGo.Client.AutoRest
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Update.
    /// </summary>
    public static partial class UpdateExtensions
    {
            /// <summary>
            /// Update an existing user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// folder name
            /// </param>
            public static ApiResponse FolderMethod(this IUpdate operations, BaseVirtualFolder body, string name)
            {
                return operations.FolderMethodAsync(body, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// folder name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiResponse> FolderMethodAsync(this IUpdate operations, BaseVirtualFolder body, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FolderMethodWithHttpMessagesAsync(body, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing admin
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='username'>
            /// the admin username
            /// </param>
            public static ApiResponse AdminMethod(this IUpdate operations, Admin body, string username)
            {
                return operations.AdminMethodAsync(body, username).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing admin
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='username'>
            /// the admin username
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiResponse> AdminMethodAsync(this IUpdate operations, Admin body, string username, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AdminMethodWithHttpMessagesAsync(body, username, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='username'>
            /// the username
            /// </param>
            /// <param name='disconnect'>
            /// Disconnect:
            /// * `0` The user will not be disconnected and it will continue to use the old
            /// configuration until connected. This is the default
            /// * `1` The user will be disconnected after a successful update. It must
            /// login again and so it will be forced to use the new configuration
            /// </param>
            public static ApiResponse UserMethod(this IUpdate operations, User body, string username, int? disconnect = default(int?))
            {
                return operations.UserMethodAsync(body, username, disconnect).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='username'>
            /// the username
            /// </param>
            /// <param name='disconnect'>
            /// Disconnect:
            /// * `0` The user will not be disconnected and it will continue to use the old
            /// configuration until connected. This is the default
            /// * `1` The user will be disconnected after a successful update. It must
            /// login again and so it will be forced to use the new configuration
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiResponse> UserMethodAsync(this IUpdate operations, User body, string username, int? disconnect = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UserMethodWithHttpMessagesAsync(body, username, disconnect, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
