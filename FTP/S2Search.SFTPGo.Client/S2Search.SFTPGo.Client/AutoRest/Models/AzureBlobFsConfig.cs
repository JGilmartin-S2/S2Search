// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.SFTPGo.Client.AutoRest.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Azure Blob Storage configuration details
    /// </summary>
    public partial class AzureBlobFsConfig
    {
        /// <summary>
        /// Initializes a new instance of the AzureBlobFsConfig class.
        /// </summary>
        public AzureBlobFsConfig()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureBlobFsConfig class.
        /// </summary>
        /// <param name="accountName">Storage Account Name, leave blank to use
        /// SAS URL</param>
        /// <param name="sasUrl">Shared access signature URL, leave blank if
        /// using account/key</param>
        /// <param name="endpoint">optional endpoint. Default is
        /// "blob.core.windows.net". If you use the emulator the endpoint must
        /// include the protocol, for example "http://127.0.0.1:10000"</param>
        /// <param name="uploadPartSize">the buffer size (in MB) to use for
        /// multipart uploads. If this value is set to zero, the default value
        /// (4MB) will be used.</param>
        /// <param name="uploadConcurrency">the number of parts to upload in
        /// parallel. If this value is set to zero, the default value (2) will
        /// be used</param>
        /// <param name="accessTier">Possible values include: '', 'Archive',
        /// 'Hot', 'Cool'</param>
        /// <param name="keyPrefix">key_prefix is similar to a chroot directory
        /// for a local filesystem. If specified the user will only see
        /// contents that starts with this prefix and so you can restrict
        /// access to a specific virtual folder. The prefix, if not empty, must
        /// not start with "/" and must end with "/". If empty the whole
        /// container contents will be available</param>
        public AzureBlobFsConfig(string container = default(string), string accountName = default(string), Secret accountKey = default(Secret), string sasUrl = default(string), string endpoint = default(string), int? uploadPartSize = default(int?), int? uploadConcurrency = default(int?), string accessTier = default(string), string keyPrefix = default(string), bool? useEmulator = default(bool?))
        {
            Container = container;
            AccountName = accountName;
            AccountKey = accountKey;
            SasUrl = sasUrl;
            Endpoint = endpoint;
            UploadPartSize = uploadPartSize;
            UploadConcurrency = uploadConcurrency;
            AccessTier = accessTier;
            KeyPrefix = keyPrefix;
            UseEmulator = useEmulator;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "container")]
        public string Container { get; set; }

        /// <summary>
        /// Gets or sets storage Account Name, leave blank to use SAS URL
        /// </summary>
        [JsonProperty(PropertyName = "account_name")]
        public string AccountName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "account_key")]
        public Secret AccountKey { get; set; }

        /// <summary>
        /// Gets or sets shared access signature URL, leave blank if using
        /// account/key
        /// </summary>
        [JsonProperty(PropertyName = "sas_url")]
        public string SasUrl { get; set; }

        /// <summary>
        /// Gets or sets optional endpoint. Default is "blob.core.windows.net".
        /// If you use the emulator the endpoint must include the protocol, for
        /// example "http://127.0.0.1:10000"
        /// </summary>
        [JsonProperty(PropertyName = "endpoint")]
        public string Endpoint { get; set; }

        /// <summary>
        /// Gets or sets the buffer size (in MB) to use for multipart uploads.
        /// If this value is set to zero, the default value (4MB) will be used.
        /// </summary>
        [JsonProperty(PropertyName = "upload_part_size")]
        public int? UploadPartSize { get; set; }

        /// <summary>
        /// Gets or sets the number of parts to upload in parallel. If this
        /// value is set to zero, the default value (2) will be used
        /// </summary>
        [JsonProperty(PropertyName = "upload_concurrency")]
        public int? UploadConcurrency { get; set; }

        /// <summary>
        /// Gets or sets possible values include: '', 'Archive', 'Hot', 'Cool'
        /// </summary>
        [JsonProperty(PropertyName = "access_tier")]
        public string AccessTier { get; set; }

        /// <summary>
        /// Gets or sets key_prefix is similar to a chroot directory for a
        /// local filesystem. If specified the user will only see contents that
        /// starts with this prefix and so you can restrict access to a
        /// specific virtual folder. The prefix, if not empty, must not start
        /// with "/" and must end with "/". If empty the whole container
        /// contents will be available
        /// </summary>
        [JsonProperty(PropertyName = "key_prefix")]
        public string KeyPrefix { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "use_emulator")]
        public bool? UseEmulator { get; set; }

    }
}
