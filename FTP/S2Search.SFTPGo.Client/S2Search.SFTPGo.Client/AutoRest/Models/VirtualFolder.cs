// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.SFTPGo.Client.AutoRest.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A virtual folder is a mapping between a SFTPGo virtual path and a
    /// filesystem path outside the user home directory. The specified paths
    /// must be absolute and the virtual path cannot be "/", it must be a sub
    /// directory. The parent directory for the specified virtual path must
    /// exist. SFTPGo will try to automatically create any missing parent
    /// directory for the configured virtual folders at user login.
    /// </summary>
    public partial class VirtualFolder : BaseVirtualFolder
    {
        /// <summary>
        /// Initializes a new instance of the VirtualFolder class.
        /// </summary>
        public VirtualFolder()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualFolder class.
        /// </summary>
        /// <param name="mappedPath">absolute filesystem path to use as virtual
        /// folder</param>
        /// <param name="name">unique name for this virtual folder</param>
        /// <param name="lastQuotaUpdate">Last quota update as unix timestamp
        /// in milliseconds</param>
        /// <param name="users">list of usernames associated with this virtual
        /// folder</param>
        /// <param name="quotaSize">Quota as size in bytes. 0 menas unlimited,
        /// -1 means included in user quota. Please note that quota is updated
        /// if files are added/removed via SFTPGo otherwise a quota scan or a
        /// manual quota update is needed</param>
        /// <param name="quotaFiles">Quota as number of files. 0 menas
        /// unlimited, , -1 means included in user quota. Please note that
        /// quota is updated if files are added/removed via SFTPGo otherwise a
        /// quota scan or a manual quota update is needed</param>
        public VirtualFolder(string mappedPath, string virtualPath, int? id = default(int?), string name = default(string), long? usedQuotaSize = default(long?), int? usedQuotaFiles = default(int?), long? lastQuotaUpdate = default(long?), IList<string> users = default(IList<string>), long? quotaSize = default(long?), int? quotaFiles = default(int?))
            : base(mappedPath, id, name, usedQuotaSize, usedQuotaFiles, lastQuotaUpdate, users)
        {
            VirtualPath = virtualPath;
            QuotaSize = quotaSize;
            QuotaFiles = quotaFiles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "virtual_path")]
        public string VirtualPath { get; set; }

        /// <summary>
        /// Gets or sets quota as size in bytes. 0 menas unlimited, -1 means
        /// included in user quota. Please note that quota is updated if files
        /// are added/removed via SFTPGo otherwise a quota scan or a manual
        /// quota update is needed
        /// </summary>
        [JsonProperty(PropertyName = "quota_size")]
        public long? QuotaSize { get; set; }

        /// <summary>
        /// Gets or sets quota as number of files. 0 menas unlimited, , -1
        /// means included in user quota. Please note that quota is updated if
        /// files are added/removed via SFTPGo otherwise a quota scan or a
        /// manual quota update is needed
        /// </summary>
        [JsonProperty(PropertyName = "quota_files")]
        public int? QuotaFiles { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (VirtualPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VirtualPath");
            }
        }
    }
}
