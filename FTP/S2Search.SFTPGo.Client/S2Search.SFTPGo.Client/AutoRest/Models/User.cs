// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.SFTPGo.Client.AutoRest.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class User
    {
        /// <summary>
        /// Initializes a new instance of the User class.
        /// </summary>
        public User()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the User class.
        /// </summary>
        /// <param name="status">status:
        /// * `0` user is disabled, login is not allowed
        /// * `1` user is enabled
        /// </param>
        /// <param name="username">username is unique</param>
        /// <param name="expirationDate">expiration date as unix timestamp in
        /// milliseconds. An expired account cannot login. 0 means no
        /// expiration</param>
        /// <param name="password">password or public key/SSH user certificate
        /// are mandatory. If the password has no known hashing algo prefix it
        /// will be stored using argon2id. You can send a password hashed as
        /// bcrypt or pbkdf2 and it will be stored as is. For security reasons
        /// this field is omitted when you search/get users</param>
        /// <param name="publicKeys">a password or at least one public key/SSH
        /// user certificate are mandatory.</param>
        /// <param name="homeDir">path to the user home directory. The user
        /// cannot upload or download files outside this directory. SFTPGo
        /// tries to automatically create this folder if missing. Must be an
        /// absolute path</param>
        /// <param name="virtualFolders">mapping between virtual SFTPGo paths
        /// and filesystem paths outside the user home directory. Supported for
        /// local filesystem only. If one or more of the specified folders are
        /// not inside the dataprovider they will be automatically created. You
        /// have to create the folder on the filesystem yourself</param>
        /// <param name="uid">if you run SFTPGo as root user, the created files
        /// and directories will be assigned to this uid. 0 means no change,
        /// the owner will be the user that runs SFTPGo. Ignored on
        /// windows</param>
        /// <param name="gid">if you run SFTPGo as root user, the created files
        /// and directories will be assigned to this gid. 0 means no change,
        /// the group will be the one of the user that runs SFTPGo. Ignored on
        /// windows</param>
        /// <param name="maxSessions">Limit the sessions that a user can open.
        /// 0 means unlimited</param>
        /// <param name="quotaSize">Quota as size in bytes. 0 menas unlimited.
        /// Please note that quota is updated if files are added/removed via
        /// SFTPGo otherwise a quota scan or a manual quota update is
        /// needed</param>
        /// <param name="quotaFiles">Quota as number of files. 0 menas
        /// unlimited. Please note that quota is updated if files are
        /// added/removed via SFTPGo otherwise a quota scan or a manual quota
        /// update is needed</param>
        /// <param name="lastQuotaUpdate">Last quota update as unix timestamp
        /// in milliseconds</param>
        /// <param name="uploadBandwidth">Maximum upload bandwidth as KB/s, 0
        /// means unlimited</param>
        /// <param name="downloadBandwidth">Maximum download bandwidth as KB/s,
        /// 0 means unlimited</param>
        /// <param name="lastLogin">Last user login as unix timestamp in
        /// milliseconds. It is saved at most once every 10 minutes</param>
        /// <param name="additionalInfo">Free form text field for external
        /// systems</param>
        public User(int? id = default(int?), int? status = default(int?), string username = default(string), long? expirationDate = default(long?), string password = default(string), IList<string> publicKeys = default(IList<string>), string homeDir = default(string), IList<VirtualFolder> virtualFolders = default(IList<VirtualFolder>), int? uid = default(int?), int? gid = default(int?), int? maxSessions = default(int?), long? quotaSize = default(long?), int? quotaFiles = default(int?), object permissions = default(object), long? usedQuotaSize = default(long?), int? usedQuotaFiles = default(int?), long? lastQuotaUpdate = default(long?), int? uploadBandwidth = default(int?), int? downloadBandwidth = default(int?), long? lastLogin = default(long?), UserFilters filters = default(UserFilters), FilesystemConfig filesystem = default(FilesystemConfig), string additionalInfo = default(string))
        {
            Id = id;
            Status = status;
            Username = username;
            ExpirationDate = expirationDate;
            Password = password;
            PublicKeys = publicKeys;
            HomeDir = homeDir;
            VirtualFolders = virtualFolders;
            Uid = uid;
            Gid = gid;
            MaxSessions = maxSessions;
            QuotaSize = quotaSize;
            QuotaFiles = quotaFiles;
            Permissions = permissions;
            UsedQuotaSize = usedQuotaSize;
            UsedQuotaFiles = usedQuotaFiles;
            LastQuotaUpdate = lastQuotaUpdate;
            UploadBandwidth = uploadBandwidth;
            DownloadBandwidth = downloadBandwidth;
            LastLogin = lastLogin;
            Filters = filters;
            Filesystem = filesystem;
            AdditionalInfo = additionalInfo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or sets status:
        /// * `0` user is disabled, login is not allowed
        /// * `1` user is enabled
        ///
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or sets username is unique
        /// </summary>
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or sets expiration date as unix timestamp in milliseconds. An
        /// expired account cannot login. 0 means no expiration
        /// </summary>
        [JsonProperty(PropertyName = "expiration_date")]
        public long? ExpirationDate { get; set; }

        /// <summary>
        /// Gets or sets password or public key/SSH user certificate are
        /// mandatory. If the password has no known hashing algo prefix it will
        /// be stored using argon2id. You can send a password hashed as bcrypt
        /// or pbkdf2 and it will be stored as is. For security reasons this
        /// field is omitted when you search/get users
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets a password or at least one public key/SSH user
        /// certificate are mandatory.
        /// </summary>
        [JsonProperty(PropertyName = "public_keys")]
        public IList<string> PublicKeys { get; set; }

        /// <summary>
        /// Gets or sets path to the user home directory. The user cannot
        /// upload or download files outside this directory. SFTPGo tries to
        /// automatically create this folder if missing. Must be an absolute
        /// path
        /// </summary>
        [JsonProperty(PropertyName = "home_dir")]
        public string HomeDir { get; set; }

        /// <summary>
        /// Gets or sets mapping between virtual SFTPGo paths and filesystem
        /// paths outside the user home directory. Supported for local
        /// filesystem only. If one or more of the specified folders are not
        /// inside the dataprovider they will be automatically created. You
        /// have to create the folder on the filesystem yourself
        /// </summary>
        [JsonProperty(PropertyName = "virtual_folders")]
        public IList<VirtualFolder> VirtualFolders { get; set; }

        /// <summary>
        /// Gets or sets if you run SFTPGo as root user, the created files and
        /// directories will be assigned to this uid. 0 means no change, the
        /// owner will be the user that runs SFTPGo. Ignored on windows
        /// </summary>
        [JsonProperty(PropertyName = "uid")]
        public int? Uid { get; set; }

        /// <summary>
        /// Gets or sets if you run SFTPGo as root user, the created files and
        /// directories will be assigned to this gid. 0 means no change, the
        /// group will be the one of the user that runs SFTPGo. Ignored on
        /// windows
        /// </summary>
        [JsonProperty(PropertyName = "gid")]
        public int? Gid { get; set; }

        /// <summary>
        /// Gets or sets limit the sessions that a user can open. 0 means
        /// unlimited
        /// </summary>
        [JsonProperty(PropertyName = "max_sessions")]
        public int? MaxSessions { get; set; }

        /// <summary>
        /// Gets or sets quota as size in bytes. 0 menas unlimited. Please note
        /// that quota is updated if files are added/removed via SFTPGo
        /// otherwise a quota scan or a manual quota update is needed
        /// </summary>
        [JsonProperty(PropertyName = "quota_size")]
        public long? QuotaSize { get; set; }

        /// <summary>
        /// Gets or sets quota as number of files. 0 menas unlimited. Please
        /// note that quota is updated if files are added/removed via SFTPGo
        /// otherwise a quota scan or a manual quota update is needed
        /// </summary>
        [JsonProperty(PropertyName = "quota_files")]
        public int? QuotaFiles { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "permissions")]
        public object Permissions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "used_quota_size")]
        public long? UsedQuotaSize { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "used_quota_files")]
        public int? UsedQuotaFiles { get; set; }

        /// <summary>
        /// Gets or sets last quota update as unix timestamp in milliseconds
        /// </summary>
        [JsonProperty(PropertyName = "last_quota_update")]
        public long? LastQuotaUpdate { get; set; }

        /// <summary>
        /// Gets or sets maximum upload bandwidth as KB/s, 0 means unlimited
        /// </summary>
        [JsonProperty(PropertyName = "upload_bandwidth")]
        public int? UploadBandwidth { get; set; }

        /// <summary>
        /// Gets or sets maximum download bandwidth as KB/s, 0 means unlimited
        /// </summary>
        [JsonProperty(PropertyName = "download_bandwidth")]
        public int? DownloadBandwidth { get; set; }

        /// <summary>
        /// Gets or sets last user login as unix timestamp in milliseconds. It
        /// is saved at most once every 10 minutes
        /// </summary>
        [JsonProperty(PropertyName = "last_login")]
        public long? LastLogin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "filters")]
        public UserFilters Filters { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "filesystem")]
        public FilesystemConfig Filesystem { get; set; }

        /// <summary>
        /// Gets or sets free form text field for external systems
        /// </summary>
        [JsonProperty(PropertyName = "additional_info")]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id != null)
            {
                if (Id < 1)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "Id", 1);
                }
            }
            if (VirtualFolders != null)
            {
                foreach (var element in VirtualFolders)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Uid != null)
            {
                if (Uid > 65535)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "Uid", 65535);
                }
                if (Uid < 0)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "Uid", 0);
                }
            }
            if (Gid != null)
            {
                if (Gid > 65535)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "Gid", 65535);
                }
                if (Gid < 0)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "Gid", 0);
                }
            }
            if (Filesystem != null)
            {
                Filesystem.Validate();
            }
        }
    }
}
