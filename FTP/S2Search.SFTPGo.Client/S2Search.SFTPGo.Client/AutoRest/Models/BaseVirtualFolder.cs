// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.SFTPGo.Client.AutoRest.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// defines the path for the virtual folder and the used quota limits. The
    /// same folder can be shared among multiple users and each user can have
    /// different quota limits or a different virtual path.
    /// </summary>
    public partial class BaseVirtualFolder
    {
        /// <summary>
        /// Initializes a new instance of the BaseVirtualFolder class.
        /// </summary>
        public BaseVirtualFolder()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BaseVirtualFolder class.
        /// </summary>
        /// <param name="mappedPath">absolute filesystem path to use as virtual
        /// folder</param>
        /// <param name="name">unique name for this virtual folder</param>
        /// <param name="lastQuotaUpdate">Last quota update as unix timestamp
        /// in milliseconds</param>
        /// <param name="users">list of usernames associated with this virtual
        /// folder</param>
        public BaseVirtualFolder(string mappedPath, int? id = default(int?), string name = default(string), long? usedQuotaSize = default(long?), int? usedQuotaFiles = default(int?), long? lastQuotaUpdate = default(long?), IList<string> users = default(IList<string>))
        {
            Id = id;
            Name = name;
            MappedPath = mappedPath;
            UsedQuotaSize = usedQuotaSize;
            UsedQuotaFiles = usedQuotaFiles;
            LastQuotaUpdate = lastQuotaUpdate;
            Users = users;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or sets unique name for this virtual folder
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets absolute filesystem path to use as virtual folder
        /// </summary>
        [JsonProperty(PropertyName = "mapped_path")]
        public string MappedPath { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "used_quota_size")]
        public long? UsedQuotaSize { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "used_quota_files")]
        public int? UsedQuotaFiles { get; set; }

        /// <summary>
        /// Gets or sets last quota update as unix timestamp in milliseconds
        /// </summary>
        [JsonProperty(PropertyName = "last_quota_update")]
        public long? LastQuotaUpdate { get; set; }

        /// <summary>
        /// Gets or sets list of usernames associated with this virtual folder
        /// </summary>
        [JsonProperty(PropertyName = "users")]
        public IList<string> Users { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MappedPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MappedPath");
            }
            if (Id != null)
            {
                if (Id < 1)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "Id", 1);
                }
            }
        }
    }
}
