// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.SFTPGo.Client.AutoRest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Additional restrictions
    /// </summary>
    public partial class UserFilters
    {
        /// <summary>
        /// Initializes a new instance of the UserFilters class.
        /// </summary>
        public UserFilters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserFilters class.
        /// </summary>
        /// <param name="allowedIp">only clients connecting from these IP/Mask
        /// are allowed. IP/Mask must be in CIDR notation as defined in RFC
        /// 4632 and RFC 4291, for example "192.0.2.0/24" or
        /// "2001:db8::/32"</param>
        /// <param name="deniedIp">clients connecting from these IP/Mask are
        /// not allowed. Denied rules are evaluated before allowed ones</param>
        /// <param name="deniedLoginMethods">if null or empty any available
        /// login method is allowed</param>
        /// <param name="deniedProtocols">if null or empty any available
        /// protocol is allowed</param>
        /// <param name="filePatterns">filters based on shell like file
        /// patterns. These restrictions do not apply to files listing for
        /// performance reasons, so a denied file cannot be
        /// downloaded/overwritten/renamed but it will still be in the list of
        /// files. Please note that these restrictions can be easily
        /// bypassed</param>
        /// <param name="fileExtensions">filters based on shell like patterns.
        /// Deprecated, use file_patterns. These restrictions do not apply to
        /// files listing for performance reasons, so a denied file cannot be
        /// downloaded/overwritten/renamed but it will still be in the list of
        /// files. Please note that these restrictions can be easily
        /// bypassed</param>
        /// <param name="maxUploadFileSize">maximum allowed size, as bytes, for
        /// a single file upload. The upload will be aborted if/when the size
        /// of the file being sent exceeds this limit. 0 means unlimited. This
        /// restriction does not apply for SSH system commands such as `git`
        /// and `rsync`</param>
        public UserFilters(IList<string> allowedIp = default(IList<string>), IList<string> deniedIp = default(IList<string>), IList<string> deniedLoginMethods = default(IList<string>), IList<string> deniedProtocols = default(IList<string>), IList<PatternsFilter> filePatterns = default(IList<PatternsFilter>), IList<ExtensionsFilter> fileExtensions = default(IList<ExtensionsFilter>), long? maxUploadFileSize = default(long?))
        {
            AllowedIp = allowedIp;
            DeniedIp = deniedIp;
            DeniedLoginMethods = deniedLoginMethods;
            DeniedProtocols = deniedProtocols;
            FilePatterns = filePatterns;
            FileExtensions = fileExtensions;
            MaxUploadFileSize = maxUploadFileSize;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets only clients connecting from these IP/Mask are
        /// allowed. IP/Mask must be in CIDR notation as defined in RFC 4632
        /// and RFC 4291, for example "192.0.2.0/24" or "2001:db8::/32"
        /// </summary>
        [JsonProperty(PropertyName = "allowed_ip")]
        public IList<string> AllowedIp { get; set; }

        /// <summary>
        /// Gets or sets clients connecting from these IP/Mask are not allowed.
        /// Denied rules are evaluated before allowed ones
        /// </summary>
        [JsonProperty(PropertyName = "denied_ip")]
        public IList<string> DeniedIp { get; set; }

        /// <summary>
        /// Gets or sets if null or empty any available login method is allowed
        /// </summary>
        [JsonProperty(PropertyName = "denied_login_methods")]
        public IList<string> DeniedLoginMethods { get; set; }

        /// <summary>
        /// Gets or sets if null or empty any available protocol is allowed
        /// </summary>
        [JsonProperty(PropertyName = "denied_protocols")]
        public IList<string> DeniedProtocols { get; set; }

        /// <summary>
        /// Gets or sets filters based on shell like file patterns. These
        /// restrictions do not apply to files listing for performance reasons,
        /// so a denied file cannot be downloaded/overwritten/renamed but it
        /// will still be in the list of files. Please note that these
        /// restrictions can be easily bypassed
        /// </summary>
        [JsonProperty(PropertyName = "file_patterns")]
        public IList<PatternsFilter> FilePatterns { get; set; }

        /// <summary>
        /// Gets or sets filters based on shell like patterns. Deprecated, use
        /// file_patterns. These restrictions do not apply to files listing for
        /// performance reasons, so a denied file cannot be
        /// downloaded/overwritten/renamed but it will still be in the list of
        /// files. Please note that these restrictions can be easily bypassed
        /// </summary>
        [JsonProperty(PropertyName = "file_extensions")]
        public IList<ExtensionsFilter> FileExtensions { get; set; }

        /// <summary>
        /// Gets or sets maximum allowed size, as bytes, for a single file
        /// upload. The upload will be aborted if/when the size of the file
        /// being sent exceeds this limit. 0 means unlimited. This restriction
        /// does not apply for SSH system commands such as `git` and `rsync`
        /// </summary>
        [JsonProperty(PropertyName = "max_upload_file_size")]
        public long? MaxUploadFileSize { get; set; }

    }
}
