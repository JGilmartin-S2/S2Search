// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.SFTPGo.Client.AutoRest.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Google Cloud Storage configuration details. The "credentials" field
    /// must be populated only when adding/updating a user. It will be always
    /// omitted, since there are sensitive data, when you search/get users
    /// </summary>
    public partial class GCSConfig
    {
        /// <summary>
        /// Initializes a new instance of the GCSConfig class.
        /// </summary>
        public GCSConfig()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GCSConfig class.
        /// </summary>
        /// <param name="automaticCredentials">Automatic credentials:
        /// * `0` - disabled, explicit credentials, using a JSON credentials
        /// file, must be provided. This is the default value if the field is
        /// null
        /// * `1` - enabled, we try to use the Application Default Credentials
        /// (ADC) strategy to find your application's credentials
        /// </param>
        /// <param name="keyPrefix">key_prefix is similar to a chroot directory
        /// for a local filesystem. If specified the user will only see
        /// contents that starts with this prefix and so you can restrict
        /// access to a specific virtual folder. The prefix, if not empty, must
        /// not start with "/" and must end with "/". If empty the whole bucket
        /// contents will be available</param>
        public GCSConfig(string bucket, Secret credentials = default(Secret), int? automaticCredentials = default(int?), string storageClass = default(string), string keyPrefix = default(string))
        {
            Bucket = bucket;
            Credentials = credentials;
            AutomaticCredentials = automaticCredentials;
            StorageClass = storageClass;
            KeyPrefix = keyPrefix;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bucket")]
        public string Bucket { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "credentials")]
        public Secret Credentials { get; set; }

        /// <summary>
        /// Gets or sets automatic credentials:
        /// * `0` - disabled, explicit credentials, using a JSON credentials
        /// file, must be provided. This is the default value if the field is
        /// null
        /// * `1` - enabled, we try to use the Application Default Credentials
        /// (ADC) strategy to find your application's credentials
        ///
        /// </summary>
        [JsonProperty(PropertyName = "automatic_credentials")]
        public int? AutomaticCredentials { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "storage_class")]
        public string StorageClass { get; set; }

        /// <summary>
        /// Gets or sets key_prefix is similar to a chroot directory for a
        /// local filesystem. If specified the user will only see contents that
        /// starts with this prefix and so you can restrict access to a
        /// specific virtual folder. The prefix, if not empty, must not start
        /// with "/" and must end with "/". If empty the whole bucket contents
        /// will be available
        /// </summary>
        [JsonProperty(PropertyName = "key_prefix")]
        public string KeyPrefix { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Bucket == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Bucket");
            }
        }
    }
}
