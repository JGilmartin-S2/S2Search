// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.SFTPGo.Client.AutoRest.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// S3 Compatible Object Storage configuration details
    /// </summary>
    public partial class S3Config
    {
        /// <summary>
        /// Initializes a new instance of the S3Config class.
        /// </summary>
        public S3Config()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the S3Config class.
        /// </summary>
        /// <param name="endpoint">optional endpoint</param>
        /// <param name="uploadPartSize">the buffer size (in MB) to use for
        /// multipart uploads. The minimum allowed part size is 5MB, and if
        /// this value is set to zero, the default value (5MB) for the AWS SDK
        /// will be used. The minimum allowed value is 5.</param>
        /// <param name="uploadConcurrency">the number of parts to upload in
        /// parallel. If this value is set to zero, the default value (2) will
        /// be used</param>
        /// <param name="keyPrefix">key_prefix is similar to a chroot directory
        /// for a local filesystem. If specified the user will only see
        /// contents that starts with this prefix and so you can restrict
        /// access to a specific virtual folder. The prefix, if not empty, must
        /// not start with "/" and must end with "/". If empty the whole bucket
        /// contents will be available</param>
        public S3Config(string bucket, string region, string accessKey = default(string), Secret accessSecret = default(Secret), string endpoint = default(string), string storageClass = default(string), int? uploadPartSize = default(int?), int? uploadConcurrency = default(int?), string keyPrefix = default(string))
        {
            Bucket = bucket;
            Region = region;
            AccessKey = accessKey;
            AccessSecret = accessSecret;
            Endpoint = endpoint;
            StorageClass = storageClass;
            UploadPartSize = uploadPartSize;
            UploadConcurrency = uploadConcurrency;
            KeyPrefix = keyPrefix;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bucket")]
        public string Bucket { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "region")]
        public string Region { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "access_key")]
        public string AccessKey { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "access_secret")]
        public Secret AccessSecret { get; set; }

        /// <summary>
        /// Gets or sets optional endpoint
        /// </summary>
        [JsonProperty(PropertyName = "endpoint")]
        public string Endpoint { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "storage_class")]
        public string StorageClass { get; set; }

        /// <summary>
        /// Gets or sets the buffer size (in MB) to use for multipart uploads.
        /// The minimum allowed part size is 5MB, and if this value is set to
        /// zero, the default value (5MB) for the AWS SDK will be used. The
        /// minimum allowed value is 5.
        /// </summary>
        [JsonProperty(PropertyName = "upload_part_size")]
        public int? UploadPartSize { get; set; }

        /// <summary>
        /// Gets or sets the number of parts to upload in parallel. If this
        /// value is set to zero, the default value (2) will be used
        /// </summary>
        [JsonProperty(PropertyName = "upload_concurrency")]
        public int? UploadConcurrency { get; set; }

        /// <summary>
        /// Gets or sets key_prefix is similar to a chroot directory for a
        /// local filesystem. If specified the user will only see contents that
        /// starts with this prefix and so you can restrict access to a
        /// specific virtual folder. The prefix, if not empty, must not start
        /// with "/" and must end with "/". If empty the whole bucket contents
        /// will be available
        /// </summary>
        [JsonProperty(PropertyName = "key_prefix")]
        public string KeyPrefix { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Bucket == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Bucket");
            }
            if (Region == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Region");
            }
        }
    }
}
