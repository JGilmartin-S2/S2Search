// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.SFTPGo.Client.AutoRest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ConnectionStatus
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionStatus class.
        /// </summary>
        public ConnectionStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionStatus class.
        /// </summary>
        /// <param name="username">connected username</param>
        /// <param name="connectionId">unique connection identifier</param>
        /// <param name="clientVersion">client version</param>
        /// <param name="remoteAddress">Remote address for the connected
        /// client</param>
        /// <param name="connectionTime">connection time as unix timestamp in
        /// milliseconds</param>
        /// <param name="command">Last SSH/FTP command or WebDAV method</param>
        /// <param name="lastActivity">last client activity as unix timestamp
        /// in milliseconds</param>
        /// <param name="protocol">Possible values include: 'SFTP', 'SCP',
        /// 'SSH', 'FTP', 'DAV'</param>
        public ConnectionStatus(string username = default(string), string connectionId = default(string), string clientVersion = default(string), string remoteAddress = default(string), long? connectionTime = default(long?), string command = default(string), long? lastActivity = default(long?), string protocol = default(string), IList<Transfer> activeTransfers = default(IList<Transfer>))
        {
            Username = username;
            ConnectionId = connectionId;
            ClientVersion = clientVersion;
            RemoteAddress = remoteAddress;
            ConnectionTime = connectionTime;
            Command = command;
            LastActivity = lastActivity;
            Protocol = protocol;
            ActiveTransfers = activeTransfers;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets connected username
        /// </summary>
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or sets unique connection identifier
        /// </summary>
        [JsonProperty(PropertyName = "connection_id")]
        public string ConnectionId { get; set; }

        /// <summary>
        /// Gets or sets client version
        /// </summary>
        [JsonProperty(PropertyName = "client_version")]
        public string ClientVersion { get; set; }

        /// <summary>
        /// Gets or sets remote address for the connected client
        /// </summary>
        [JsonProperty(PropertyName = "remote_address")]
        public string RemoteAddress { get; set; }

        /// <summary>
        /// Gets or sets connection time as unix timestamp in milliseconds
        /// </summary>
        [JsonProperty(PropertyName = "connection_time")]
        public long? ConnectionTime { get; set; }

        /// <summary>
        /// Gets or sets last SSH/FTP command or WebDAV method
        /// </summary>
        [JsonProperty(PropertyName = "command")]
        public string Command { get; set; }

        /// <summary>
        /// Gets or sets last client activity as unix timestamp in milliseconds
        /// </summary>
        [JsonProperty(PropertyName = "last_activity")]
        public long? LastActivity { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'SFTP', 'SCP', 'SSH', 'FTP',
        /// 'DAV'
        /// </summary>
        [JsonProperty(PropertyName = "protocol")]
        public string Protocol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "active_transfers")]
        public IList<Transfer> ActiveTransfers { get; set; }

    }
}
