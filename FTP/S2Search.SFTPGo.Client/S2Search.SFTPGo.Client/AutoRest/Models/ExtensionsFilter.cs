// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.SFTPGo.Client.AutoRest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ExtensionsFilter
    {
        /// <summary>
        /// Initializes a new instance of the ExtensionsFilter class.
        /// </summary>
        public ExtensionsFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExtensionsFilter class.
        /// </summary>
        /// <param name="path">exposed virtual path, if no other specific
        /// filter is defined, the filter apply for sub directories too. For
        /// example if filters are defined for the paths "/" and "/sub" then
        /// the filters for "/" are applied for any file outside the "/sub"
        /// directory</param>
        /// <param name="allowedExtensions">list of, case insensitive, allowed
        /// files extension. Shell like expansion is not supported so you have
        /// to specify `.jpg` and not `*.jpg`</param>
        /// <param name="deniedExtensions">list of, case insensitive, denied
        /// files extension. Denied file extensions are evaluated before the
        /// allowed ones</param>
        public ExtensionsFilter(string path = default(string), IList<string> allowedExtensions = default(IList<string>), IList<string> deniedExtensions = default(IList<string>))
        {
            Path = path;
            AllowedExtensions = allowedExtensions;
            DeniedExtensions = deniedExtensions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets exposed virtual path, if no other specific filter is
        /// defined, the filter apply for sub directories too. For example if
        /// filters are defined for the paths "/" and "/sub" then the filters
        /// for "/" are applied for any file outside the "/sub" directory
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets list of, case insensitive, allowed files extension.
        /// Shell like expansion is not supported so you have to specify `.jpg`
        /// and not `*.jpg`
        /// </summary>
        [JsonProperty(PropertyName = "allowed_extensions")]
        public IList<string> AllowedExtensions { get; set; }

        /// <summary>
        /// Gets or sets list of, case insensitive, denied files extension.
        /// Denied file extensions are evaluated before the allowed ones
        /// </summary>
        [JsonProperty(PropertyName = "denied_extensions")]
        public IList<string> DeniedExtensions { get; set; }

    }
}
