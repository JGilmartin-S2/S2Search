// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.SFTPGo.Client.AutoRest
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SFTPGoClient.
    /// </summary>
    public static partial class SFTPGoClientExtensions
    {
            /// <summary>
            /// invalidate the access token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ApiResponse Logout(this ISFTPGoClient operations)
            {
                return operations.LogoutAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// invalidate the access token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiResponse> LogoutAsync(this ISFTPGoClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LogoutWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Backup SFTPGo data as data provider independent JSON
            /// </summary>
            /// <remarks>
            /// The backup can be saved in a local file on the server, to avoid exposing
            /// sensitive data over the network, or returned as response body. The output
            /// of dumpdata can be used as input for loaddata
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFile'>
            /// Path for the file to write the JSON serialized data to. This path is
            /// relative to the configured "backups_path". If this file already exists it
            /// will be overwritten. To return the backup as response body set
            /// `output_data` to true instead.
            /// </param>
            /// <param name='outputData'>
            /// output_data:
            /// * `0` or any other value != 1, the backup will be saved to a file on the
            /// server, `output_file` is required
            /// * `1` the backup will be returned as response body
            /// </param>
            /// <param name='indent'>
            /// indent:
            /// * `0` no indentation. This is the default
            /// * `1` format the output JSON
            /// </param>
            public static object Dumpdata(this ISFTPGoClient operations, string outputFile = default(string), int? outputData = default(int?), int? indent = default(int?))
            {
                return operations.DumpdataAsync(outputFile, outputData, indent).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Backup SFTPGo data as data provider independent JSON
            /// </summary>
            /// <remarks>
            /// The backup can be saved in a local file on the server, to avoid exposing
            /// sensitive data over the network, or returned as response body. The output
            /// of dumpdata can be used as input for loaddata
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFile'>
            /// Path for the file to write the JSON serialized data to. This path is
            /// relative to the configured "backups_path". If this file already exists it
            /// will be overwritten. To return the backup as response body set
            /// `output_data` to true instead.
            /// </param>
            /// <param name='outputData'>
            /// output_data:
            /// * `0` or any other value != 1, the backup will be saved to a file on the
            /// server, `output_file` is required
            /// * `1` the backup will be returned as response body
            /// </param>
            /// <param name='indent'>
            /// indent:
            /// * `0` no indentation. This is the default
            /// * `1` format the output JSON
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DumpdataAsync(this ISFTPGoClient operations, string outputFile = default(string), int? outputData = default(int?), int? indent = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DumpdataWithHttpMessagesAsync(outputFile, outputData, indent, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
